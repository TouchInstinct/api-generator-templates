{% macro decapitalize(text) %}
    {{- concat(slice(text, 0, 1) | lower, slice(text, 1, text | length)) -}}
{% endmacro %}

{% macro capitalize(text) %}
    {{- concat(slice(text, 0, 1) | upper, slice(text, 1, text | length)) -}}
{% endmacro %}

{% macro formatNullableOrOptional(expr, nullable, optional) %}
    {{- expr -}}{%- if nullable or optional -%}?{%- endif -%}
{% endmacro %}

{% macro formatValueType(valueType) %}
    {%- import _self as self -%}

    {%- if valueType.baseTypeName == "Array" -%}
        [{{ self.formatValueType(valueType.itemsType) }}]
    {%- elseif valueType.baseTypeName == "Map" -%}
        [{{ self.formatValueType(valueType.keysType) }}: {{ self.formatValueType(valueType.valuesType) }}]
    {%- elseif valueType.baseTypeName == "DateTime" or valueType.baseTypeName == "DateTimeTimestamp" -%}
        DateInRegion
    {%- elseif valueType.baseTypeName == "Long" -%}
        Int64
    {%- elseif valueType.baseTypeName == "Decimal" or valueType.baseTypeName == "StringDecimal" -%}
        NSDecimalNumber
    {%- elseif valueType.baseTypeName == "Url" -%}
        URL
    {%- elseif valueType.baseTypeName == "Color" -%}
        UIColor
    {%- else -%}
        {{ valueType.baseTypeName }}
    {%- endif -%}
{% endmacro %}

{% macro formatEncodingValue(field, isStrongLinkCaptured) %}
    {%- import _self as self -%}

    {%- if field.type.type.baseTypeName == "DateTime" -%}
        {{- self.formatEncodingDate(field) -}}
    {%- elseif field.type.type.baseTypeName == "StringDecimal" -%}
        {{- self.formatEncodingStringDecimal(field) -}}
    {%- elseif field.type.type.baseTypeName == "Decimal" -%}
        {{ self.formatFieldName(field, isStrongLinkCaptured) -}}.decimalValue
    {%- elseif field.type.type.baseTypeName == "DateTimeTimestamp" -%}
        Int({{ self.formatFieldName(field, isStrongLinkCaptured) -}}.timeIntervalSince1970)
    {%- elseif field.type.type.baseTypeName == "Color" -%}
        {{ self.formatFieldName(field, isStrongLinkCaptured) -}}.hexString
    {%- elseif field.type.type.baseTypeName == "Url" -%}
        {{ self.formatFieldName(field, isStrongLinkCaptured) -}}.absoluteString
    {%- else -%}
        {{ field.name }}
    {%- endif -%}
{% endmacro %}

{% macro formatFieldName(field, isStrongLinkCaptured) %}
    {%- import _self as self -%}

    {%- if isStrongLinkCaptured -%}
        {{ field.name }}
    {%- else -%}
        {{ self.formatNullableOrOptional(field.name, field.nullable, field.optional) -}}
    {%- endif -%}
{% endmacro %}

{%- macro formatEncodingDate(field) -%}
    ApiDateFormattingService.string(from: {{ field.name -}}, format: .{{- dateFormatToName(field.type.dateFormat) -}})
{%- endmacro -%}

{%- macro formatEncodingStringDecimal(field) -%}
    ApiNumberFormattingService.string(from: {{ field.name -}}, format: .decimal)
{%- endmacro -%}

{% macro encodeIfPresent(field) %}
    {%- import _self as self -%}
    {%- set baseTypeName = field.type.type.baseTypeName -%}
    {% if baseTypeName == "DateTime" or baseTypeName == "DateTimeTimestamp" or baseTypeName == "StringDecimal" %}
        if let {{ field.name }} = {{ field.name }} {
            try container.encode({{- self.formatEncodingValue(field, true) -}}, forKey: .{{- field.name -}})
        }
    {%- else -%}
        try container.encodeIfPresent({{- self.formatEncodingValue(field, false) -}}, forKey: .{{- field.name -}})
    {%- endif -%}
{% endmacro %}

{% macro encodeToContainer(field) %}
    {%- import _self as self -%}

    {%- if field.optional -%}
        {{ self.encodeIfPresent(field) -}}
    {%- elseif field.nullable -%}
        if let {{ field.name }} = {{ field.name }} {
            try container.encode({{- self.formatEncodingValue(field, true) -}}, forKey: .{{- field.name -}})
        } else {
            try container.encodeNil(forKey: .{{- field.name -}})
        }
    {%- else -%}
        try container.encode({{- self.formatEncodingValue(field, false) -}}, forKey: .{{- field.name -}})
    {%- endif -%}
{% endmacro %}

{% macro decodeFromContainer(field) %}
    {%- import _self as self -%}
    {%- import 'complexField.utils.twig' as complexFieldUtils -%}

    {%- if field.type.type.baseTypeName == "Color" or field.type.type.baseTypeName == "DateTime" or field.type.type.baseTypeName == "StringDecimal" or field.type.type.baseTypeName == "Url" -%}
        {{ complexFieldUtils.decodeComplexField(field, "String") -}}
    {%- elseif field.type.type.baseTypeName == "DateTimeTimestamp" -%}
        {{ complexFieldUtils.decodeComplexField(field, "Int") -}}
    {%- elseif field.type.type.baseTypeName == "Decimal" -%}
        {{ complexFieldUtils.decodeComplexField(field, "Decimal") -}}
    {%- else -%}
        self.{{ field.name }} = try container.{{- self.formatOptionalDecode(field) -}}({{ self.formatValueType(field.type.type) }}.self, forKey: .{{ field.name }})
    {%- endif -%}
{% endmacro %}

{% macro formatOptionalDecode(field) %}
    {%- if field.optional or field.nullable -%}
        decodeIfPresent
    {%- else -%}
        decode
    {%- endif -%}
{% endmacro %}

{% macro enumValueName(value) %}
    {%- import _self as self -%}

    {{- self.decapitalize(value.name) -}}
{%- endmacro %}

{% macro escapeIfNeeded(expr) %}
    {%- if expr == "default" or expr == "operator" -%}
        `{{ expr }}`
    {%- else -%}
        {{ expr }}
    {%- endif -%}
{% endmacro %}

{% macro defaultValueForField(field) %}
    {%- set nullable = field.nullable -%}
    {%- set optional = field.optional -%}
    {%- set baseTypeName = field.type.type.baseTypeName -%}

    {%- if nullable or optional -%}
        nil
    {%- elseif baseTypeName == "Array" -%}
        []
    {%- elseif baseTypeName == "Map" -%}
        [:]
    {%- elseif baseTypeName == "String" -%}
        ""
    {%- elseif baseTypeName == "DateTime" or baseTypeName == "DateTimeTimestamp" -%}
        Date().inDefaultRegion()
    {%- elseif baseTypeName == "Double" -%}
        0.0
    {%- elseif baseTypeName == "Long" or baseTypeName == "Int" -%}
        0
    {%- elseif baseTypeName == "Bool" -%}
        false
    {%- elseif baseTypeName == "Decimal" or baseTypeName == "StringDecimal" -%}
        .zero
    {%- elseif baseTypeName == "Color" -%}
        .clear
    {%- elseif baseTypeName == "Url" -%}
        URL(string: "https://example.com")!
    {%- elseif (field.type.values is not null) -%}
        {%- import _self as self -%}

        .{{ self.enumValueName(first(field.type.values)) }}
    {%- else -%}
        .new{{ baseTypeName }}
    {%- endif -%}
{%- endmacro %}

{% macro valueTypeHasGenerics(valueType) %}
    {%- if valueType.typeParameters is not empty -%}
        {{ true }}
    {%- elseif (valueType.parent is not null) -%}
        {%- import _self as self -%}

        {{- self.valueTypeHasGenerics(valueType.parent) -}}
    {%- endif -%}
{% endmacro %}

{% macro hasGenericsOrNonEqutableCollections(type) %}
    {%- set valueType = type.type -%}

    {%- import _self as self -%}

    {%- if self.valueTypeHasGenerics(valueType) != null -%}
        {{ true }}
    {%- elseif valueType.baseTypeName == "Array" -%}
        {%- if (valueType.itemsType.typeParameters is not null) -%}
            {{ true }}
        {%- else -%}
            {{- self.hasGenericsOrNonEqutableCollections(valueType.itemsType) -}}
        {%- endif -%}
    {%- elseif valueType.baseTypeName == "Map" -%}
        {{ true }}
    {%- elseif type.allFieldsOrdered is not null -%}
        {%- for field in type.allFieldsOrdered -%}
            {{- self.hasGenericsOrNonEqutableCollections(field.type) -}}
        {%- endfor -%}
    {%- endif -%}
{%- endmacro %}

{% macro fieldIsGeneric(field, typeParameters) %}
    {%- for typeParameter in typeParameters -%}
        {%- if typeParameter.baseTypeName == field.type.type.baseTypeName -%}
            {{ true }}
        {%- endif -%}
    {%- endfor -%}
{% endmacro %}
